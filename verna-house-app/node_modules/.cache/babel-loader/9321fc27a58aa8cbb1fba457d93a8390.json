{"ast":null,"code":"var _jsxFileName = \"/home/lcom/Music/DH90/Verna-Django-Backend-main/verna-house-app/src/Componants/Tasks/TaskForm.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Box from '@mui/material/Box';\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport { useNavigate } from \"react-router-dom\";\nimport IconButton from '@mui/material/IconButton';\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\nimport classes from '../Login.module.css';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport InputAdornment from '@mui/material/InputAdornment'; // import DatePicker from '../DatePicker';\n\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport DatePicker from '@mui/lab/DatePicker';\nimport MenuItem from '@mui/material/MenuItem';\nimport { Select } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Rolls = [{\n  value: 'Supplier',\n  label: 'Supplier'\n}, {\n  value: 'Customer',\n  label: 'Customer'\n}, {\n  value: 'Agency',\n  label: 'Agency'\n}, {\n  value: 'Worker',\n  label: 'Worker'\n}];\n\nconst TaskForm = props => {\n  _s();\n\n  const navigate = useNavigate();\n\n  const goBackHandler = () => {\n    navigate(\"/Account\");\n  };\n\n  const [roll, setRoll] = React.useState(null);\n\n  const rollChangeHandler = event => {\n    setRoll(event.target.value);\n  }; // const [date, setDate] = React.useState('Controlled');\n  // const dateChange = (event) => {\n  //     setValue(event.target.value);\n  // };\n\n\n  const [value, setValue] = React.useState(null);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    align: \"center\",\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      variant: \"outlined\",\n      sx: {\n        maxWidth: 500,\n        maxHeight: 8000,\n        borderRadius: 5,\n        borderColor: 'primary.main',\n        paddingTop: 1,\n        m: 1\n      },\n      margin: \"10px\",\n      children: [/*#__PURE__*/_jsxDEV(CardActions, {\n        children: /*#__PURE__*/_jsxDEV(IconButton, {\n          sx: {\n            marginLeft: 1\n          },\n          onClick: goBackHandler,\n          children: /*#__PURE__*/_jsxDEV(ChevronLeftIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          component: \"div\",\n          fontSize: \"26px\",\n          className: classes.registration,\n          children: \"Add Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          component: \"form\",\n          sx: {\n            marginTop: 5,\n            marginLeft: 0,\n            '& .MuiTextField-root': {\n              m: 1,\n              width: '40ch',\n              size: 'small'\n            }\n          },\n          noValidate: true,\n          autoComplete: \"off\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              required: true,\n              multiline: true,\n              size: \"medium\",\n              id: \"username\",\n              label: \"UserName\",\n              placeholder: \"xyz_abc123\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              multiline: true,\n              size: \"medium\",\n              id: \"roll-id-agency\",\n              label: \"Roll\",\n              defaultValue: \"Agency\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              required: true,\n              multiline: true,\n              size: \"medium\",\n              id: \"description-task\",\n              label: \"Description\",\n              placeholder: \"xyzbfhfkabc\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              disableFuture: true,\n              variant: \"outlined\",\n              color: \"primary\",\n              inputProps: {\n                type: \"date\",\n                accept: \"date\"\n              },\n              label: \"Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              labelId: \"demo-simple-select-label\",\n              id: \"select-roll\",\n              label: \"Roll\",\n              InputProps: {\n                type: \"select\",\n                textAlign: 'left'\n              },\n              children: /*#__PURE__*/_jsxDEV(Select, {\n                labelId: \"demo-simple-select-label\",\n                id: \"select-roll\",\n                label: \"Roll\",\n                value: roll,\n                onChange: rollChangeHandler,\n                children: Rolls.map(option => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: option.value,\n                  children: option.label\n                }, option.value, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 167,\n                  columnNumber: 41\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.button,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                onClick: props.onClick,\n                sx: {\n                  marginTop: 0.5,\n                  marginRight: -34\n                },\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TaskForm, \"pQZrt4LdBVFsh1Gyap1xpKqYQZ0=\", false, function () {\n  return [useNavigate];\n});\n\n_c = TaskForm;\nexport default TaskForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskForm\");","map":{"version":3,"sources":["/home/lcom/Music/DH90/Verna-Django-Backend-main/verna-house-app/src/Componants/Tasks/TaskForm.js"],"names":["React","Box","Card","CardActions","CardContent","useNavigate","IconButton","ChevronLeftIcon","classes","Button","TextField","Typography","Container","InputAdornment","AdapterDateFns","LocalizationProvider","DatePicker","MenuItem","Select","Rolls","value","label","TaskForm","props","navigate","goBackHandler","roll","setRoll","useState","rollChangeHandler","event","target","setValue","maxWidth","maxHeight","borderRadius","borderColor","paddingTop","m","marginLeft","registration","marginTop","width","size","type","accept","textAlign","map","option","button","onClick","marginRight"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,eAAP,MAA4B,iCAA5B;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,cAAP,MAA2B,8BAA3B,C,CACA;;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,OAAOC,oBAAP,MAAiC,+BAAjC;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,MAAT,QAAuB,eAAvB;;AAEA,MAAMC,KAAK,GAAG,CACV;AACIC,EAAAA,KAAK,EAAE,UADX;AAEIC,EAAAA,KAAK,EAAE;AAFX,CADU,EAKV;AACID,EAAAA,KAAK,EAAE,UADX;AAEIC,EAAAA,KAAK,EAAE;AAFX,CALU,EASV;AACID,EAAAA,KAAK,EAAE,QADX;AAEIC,EAAAA,KAAK,EAAE;AAFX,CATU,EAaV;AACID,EAAAA,KAAK,EAAE,QADX;AAEIC,EAAAA,KAAK,EAAE;AAFX,CAbU,CAAd;;AAoBA,MAAMC,QAAQ,GAAGC,KAAK,IAAI;AAAA;;AACtB,QAAMC,QAAQ,GAAGnB,WAAW,EAA5B;;AAEA,QAAMoB,aAAa,GAAG,MAAM;AACxBD,IAAAA,QAAQ,CAAC,UAAD,CAAR;AACH,GAFD;;AAGA,QAAM,CAACE,IAAD,EAAOC,OAAP,IAAkB3B,KAAK,CAAC4B,QAAN,CAAe,IAAf,CAAxB;;AAEA,QAAMC,iBAAiB,GAAIC,KAAD,IAAW;AACjCH,IAAAA,OAAO,CAACG,KAAK,CAACC,MAAN,CAAaX,KAAd,CAAP;AACH,GAFD,CARsB,CAYtB;AAEA;AACA;AACA;;;AAEA,QAAM,CAACA,KAAD,EAAQY,QAAR,IAAoBhC,KAAK,CAAC4B,QAAN,CAAe,IAAf,CAA1B;AACA,sBACI,QAAC,SAAD;AAAW,IAAA,KAAK,EAAC,QAAjB;AAAA,2BACI,QAAC,IAAD;AAAM,MAAA,OAAO,EAAC,UAAd;AAAyB,MAAA,EAAE,EAAE;AAAEK,QAAAA,QAAQ,EAAE,GAAZ;AAAiBC,QAAAA,SAAS,EAAE,IAA5B;AAAkCC,QAAAA,YAAY,EAAE,CAAhD;AAAmDC,QAAAA,WAAW,EAAE,cAAhE;AAAgFC,QAAAA,UAAU,EAAE,CAA5F;AAA+FC,QAAAA,CAAC,EAAE;AAAlG,OAA7B;AAAoI,MAAA,MAAM,EAAC,MAA3I;AAAA,8BACI,QAAC,WAAD;AAAA,+BACI,QAAC,UAAD;AAAY,UAAA,EAAE,EAAE;AAAEC,YAAAA,UAAU,EAAE;AAAd,WAAhB;AAAoC,UAAA,OAAO,EAAEd,aAA7C;AAAA,iCACI,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAMI,QAAC,WAAD;AAAA,gCACI,QAAC,UAAD;AAAY,UAAA,OAAO,EAAC,IAApB;AAAyB,UAAA,SAAS,EAAC,KAAnC;AAAyC,UAAA,QAAQ,EAAC,MAAlD;AAAyD,UAAA,SAAS,EAAEjB,OAAO,CAACgC,YAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,GAAD;AACI,UAAA,SAAS,EAAC,MADd;AAEI,UAAA,EAAE,EAAE;AACAC,YAAAA,SAAS,EAAE,CADX;AAEAF,YAAAA,UAAU,EAAE,CAFZ;AAGA,oCAAwB;AAAED,cAAAA,CAAC,EAAE,CAAL;AAAQI,cAAAA,KAAK,EAAE,MAAf;AAAuBC,cAAAA,IAAI,EAAE;AAA7B;AAHxB,WAFR;AAOI,UAAA,UAAU,MAPd;AAQI,UAAA,YAAY,EAAC,KARjB;AAAA,iCASI;AAAA,oCACI,QAAC,SAAD;AACI,cAAA,QAAQ,MADZ;AAEI,cAAA,SAAS,MAFb;AAGI,cAAA,IAAI,EAAC,QAHT;AAII,cAAA,EAAE,EAAC,UAJP;AAKI,cAAA,KAAK,EAAC,UALV;AAMI,cAAA,WAAW,EAAC;AANhB;AAAA;AAAA;AAAA;AAAA,oBADJ,eASI,QAAC,SAAD;AACI,cAAA,SAAS,MADb;AAEI,cAAA,IAAI,EAAC,QAFT;AAGI,cAAA,EAAE,EAAC,gBAHP;AAII,cAAA,KAAK,EAAC,MAJV;AAKI,cAAA,YAAY,EAAC;AALjB;AAAA;AAAA;AAAA;AAAA,oBATJ,eAgBI,QAAC,SAAD;AACI,cAAA,QAAQ,MADZ;AAEI,cAAA,SAAS,MAFb;AAGI,cAAA,IAAI,EAAC,QAHT;AAII,cAAA,EAAE,EAAC,kBAJP;AAKI,cAAA,KAAK,EAAC,aALV;AAMI,cAAA,WAAW,EAAC;AANhB;AAAA;AAAA;AAAA;AAAA,oBAhBJ,eA8CI,QAAC,SAAD;AACI,cAAA,aAAa,MADjB;AAEI,cAAA,OAAO,EAAC,UAFZ;AAGI,cAAA,KAAK,EAAC,SAHV;AAII,cAAA,UAAU,EAAE;AACRC,gBAAAA,IAAI,EAAE,MADE;AAERC,gBAAAA,MAAM,EAAE;AAFA,eAJhB;AASI,cAAA,KAAK,EAAC;AATV;AAAA;AAAA;AAAA;AAAA,oBA9CJ,eAsEI,QAAC,SAAD;AACI,cAAA,OAAO,EAAC,0BADZ;AAEI,cAAA,EAAE,EAAC,aAFP;AAGI,cAAA,KAAK,EAAC,MAHV;AAII,cAAA,UAAU,EAAE;AACRD,gBAAAA,IAAI,EAAE,QADE;AAERE,gBAAAA,SAAS,EAAE;AAFH,eAJhB;AAAA,qCAUI,QAAC,MAAD;AACI,gBAAA,OAAO,EAAC,0BADZ;AAEI,gBAAA,EAAE,EAAC,aAFP;AAGI,gBAAA,KAAK,EAAC,MAHV;AAII,gBAAA,KAAK,EAAEpB,IAJX;AAKI,gBAAA,QAAQ,EAAEG,iBALd;AAAA,0BAMKV,KAAK,CAAC4B,GAAN,CAAWC,MAAD,iBACP,QAAC,QAAD;AAA6B,kBAAA,KAAK,EAAEA,MAAM,CAAC5B,KAA3C;AAAA,4BACK4B,MAAM,CAAC3B;AADZ,mBAAe2B,MAAM,CAAC5B,KAAtB;AAAA;AAAA;AAAA;AAAA,wBADH;AANL;AAAA;AAAA;AAAA;AAAA;AAVJ;AAAA;AAAA;AAAA;AAAA,oBAtEJ,eA6FI;AAAK,cAAA,SAAS,EAAEZ,OAAO,CAACyC,MAAxB;AAAA,qCACI,QAAC,MAAD;AACI,gBAAA,OAAO,EAAC,WADZ;AAEI,gBAAA,OAAO,EAAE1B,KAAK,CAAC2B,OAFnB;AAGI,gBAAA,EAAE,EAAE;AACAT,kBAAAA,SAAS,EAAE,GADX;AAEAU,kBAAAA,WAAW,EAAE,CAAC;AAFd,iBAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBA7FJ;AAAA;AAAA;AAAA;AAAA;AAAA;AATJ;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAiIH,CApJD;;GAAM7B,Q;UACejB,W;;;KADfiB,Q;AAqJN,eAAeA,QAAf","sourcesContent":["import React from 'react';\nimport Box from '@mui/material/Box';\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport { useNavigate } from \"react-router-dom\";\nimport IconButton from '@mui/material/IconButton';\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\nimport classes from '../Login.module.css';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport InputAdornment from '@mui/material/InputAdornment';\n// import DatePicker from '../DatePicker';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport DatePicker from '@mui/lab/DatePicker';\nimport MenuItem from '@mui/material/MenuItem';\nimport { Select } from '@mui/material';\n\nconst Rolls = [\n    {\n        value: 'Supplier',\n        label: 'Supplier',\n    },\n    {\n        value: 'Customer',\n        label: 'Customer',\n    },\n    {\n        value: 'Agency',\n        label: 'Agency',\n    },\n    {\n        value: 'Worker',\n        label: 'Worker',\n    },\n];\n\n\nconst TaskForm = props => {\n    const navigate = useNavigate()\n\n    const goBackHandler = () => {\n        navigate(\"/Account\")\n    }\n    const [roll, setRoll] = React.useState(null);\n\n    const rollChangeHandler = (event) => {\n        setRoll(event.target.value);\n    };\n\n    // const [date, setDate] = React.useState('Controlled');\n\n    // const dateChange = (event) => {\n    //     setValue(event.target.value);\n    // };\n\n    const [value, setValue] = React.useState(null);\n    return (\n        <Container align=\"center\">\n            <Card variant=\"outlined\" sx={{ maxWidth: 500, maxHeight: 8000, borderRadius: 5, borderColor: 'primary.main', paddingTop: 1, m: 1 }} margin=\"10px\">\n                <CardActions>\n                    <IconButton sx={{ marginLeft: 1, }} onClick={goBackHandler}>\n                        <ChevronLeftIcon />\n                    </IconButton>\n                </CardActions>\n                <CardContent>\n                    <Typography variant=\"h4\" component='div' fontSize='26px' className={classes.registration}>Add Task</Typography>\n                    <Box\n                        component=\"form\"\n                        sx={{\n                            marginTop: 5,\n                            marginLeft: 0,\n                            '& .MuiTextField-root': { m: 1, width: '40ch', size: 'small' },\n                        }}\n                        noValidate\n                        autoComplete=\"off\"  >\n                        <div>\n                            <TextField\n                                required\n                                multiline\n                                size='medium'\n                                id=\"username\"\n                                label=\"UserName\"\n                                placeholder=\"xyz_abc123\"\n                            />\n                            <TextField\n                                multiline\n                                size='medium'\n                                id=\"roll-id-agency\"\n                                label=\"Roll\"\n                                defaultValue=\"Agency\"\n                            />\n                            <TextField\n                                required\n                                multiline\n                                size='medium'\n                                id=\"description-task\"\n                                label=\"Description\"\n                                placeholder=\"xyzbfhfkabc\"\n                            />\n                            {/* <TextField\n                                InputProps={{\n                                    endAdornment: (\n                                        <InputAdornment position=\"end\">\n                                            <LocalizationProvider dateAdapter={AdapterDateFns}>\n                                                <DatePicker\n                                                    disableFuture\n                                                    label=\"Date\"\n                                                    openTo=\"year\"\n                                                    views={['year', 'month', 'day']}\n                                                    value={value}\n                                                    onChange={\n                                                        (newValue) => { setValue(newValue); }\n                                                    }\n                                                    renderInput={(params) => <TextField {...params} />}\n                                                />\n                                            </LocalizationProvider>\n                                        </InputAdornment>\n                                    ),\n                                }}\n                                variant=\"outlined\">\n                            </TextField> */}\n                            <TextField\n                                disableFuture\n                                variant=\"outlined\"\n                                color=\"primary\"\n                                inputProps={{\n                                    type: \"date\",\n                                    accept: \"date\"\n                                }}\n\n                                label=\"Date\" />\n\n                            {/* <LocalizationProvider dateAdapter={AdapterDateFns}>\n                                <DatePicker\n                                    disableFuture\n                                    label=\"Date\"\n                                    openTo=\"year\"\n                                    views={['year', 'month', 'day']}\n                                    value={value}\n                                    onChange={\n                                        (newValue) => { setValue(newValue); }\n                                    }\n                                    renderInput={(params) => <TextField {...params} />}\n                                />\n                            </LocalizationProvider> */}\n                            <TextField\n                                labelId=\"demo-simple-select-label\"\n                                id=\"select-roll\"\n                                label=\"Roll\"\n                                InputProps={{\n                                    type: \"select\",\n                                    textAlign: 'left',\n\n\n                                }}>\n                                <Select\n                                    labelId=\"demo-simple-select-label\"\n                                    id=\"select-roll\"\n                                    label=\"Roll\"\n                                    value={roll}\n                                    onChange={rollChangeHandler}>\n                                    {Rolls.map((option) => (\n                                        <MenuItem key={option.value} value={option.value}>\n                                            {option.label}\n                                        </MenuItem>\n                                    ))}</Select>\n\n                            </TextField>\n                            <div className={classes.button}>\n                                <Button\n                                    variant=\"contained\"\n                                    onClick={props.onClick}\n                                    sx={{\n                                        marginTop: 0.5,\n                                        marginRight: -34,\n                                    }}>\n                                    Submit</Button>\n                            </div>\n                        </div>\n                    </Box>\n                </CardContent>\n            </Card>\n        </Container>\n    );\n\n};\nexport default TaskForm;"]},"metadata":{},"sourceType":"module"}